" Suchen ohne Gross/Klein
filetype off                  " required
syntax on

set ignorecase
set clipboard=unnamed
set autoread

set background=light
" colorscheme scheakur
"colorscheme darkblue
"colorscheme torte
" colorscheme slate
" colorscheme morning


" Einruecken von Python
" set cindent
set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
inoremap # X<BS>#


set fileencodings=ucs-bom,utf-8,latin1
set ls=2
set ruler
set showmode
set nocompatible
set sidescroll=1
set sidescrolloff=10
set nolinebreak
set nobackup

set incsearch
set hlsearch
set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set ignorecase

map <C-h> :call WinMove('h')<cr>
map <C-j> :call WinMove('j')<cr>
map <C-k> :call WinMove('k')<cr>
map <C-l> :call WinMove('l')<cr>

function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction


" Dateien erkennen
autocmd BufRead *.mk set syntax=python filetype=python
autocmd BufRead *.wsgi set syntax=python filetype=python
autocmd BufRead *.twig set syntax=html filetype=html
autocmd BufRead *.lektion set syntax=tex filetype=tex
autocmd BufRead *.omnifocusjs set syntax=javascript filetype=javascript

" Statusbar
set laststatus=2
set statusline=
set statusline+=%-3.3n\                      " buffer number
set statusline+=%f\                          " file name
set statusline+=%h%m%r%w                     " flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}, " filetype
set statusline+=%{&encoding},                " encoding
set statusline+=%{&fileformat}]              " file format
set statusline+=%=                           " right align
set statusline+=0x%-8B\                      " current char
set statusline+=%-10.(%l,%c%V%)\ %<%P        " offset

" Trailing Spaces hervorheben
highlight ExtraWhitespace ctermbg=cyan

highlight IncSearch ctermbg=green guibg=green
highlight Search ctermbg=red ctermfg=white term=bold

" The following alternative may be less obtrusive.
" Show trailing whitespace:
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/

" Show trailing whitespace and spaces before a tab:
match ExtraWhitespace /\s\+$\| \+\ze\t/


" Faltung von wato.py
set foldenable
" map <F7> :set foldlevel=0<CR>
" map <F8> :set foldlevel=1<CR>
" set foldmethod=marker
" set foldmarker=#\ \ \ .,#.
map <F7> :set foldlevel=0<CR>
map <F8> :set foldlevel=1<CR>
" set foldmethod=expr
" set foldexpr=GetPotionFold(v:lnum)


" Zeile vom letzten mal merken
autocmd BufReadPost *
 \ if line("'\"") > 0 && line("'\"") <= line("$") |
 \   exe "normal g`\"" |
 \ endif


" Markieren langer zeilen
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%101v', 80)

com! FormatJSON %!python -m json.tool
com! RB %!reload-browser firefox
"set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣
set listchars=tab:>·,extends:>,precedes:<
set list

"let g:netrw_banner = 0
"let g:netrw_liststyle = 3
"let g:netrw_browse_split = 4
"let g:netrw_altv = 1
"let g:netrw_winsize = 15

" Plugins
execute pathogen#infect()
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exe = 'npm run lint --'


let g:airline_theme='simple'

colorscheme base16-default-dark



nnoremap  <c-j> /<++><CR><Esc>cf>
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
