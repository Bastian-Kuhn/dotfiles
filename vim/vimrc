filetype off                  " required
syntax on

set ignorecase
set clipboard=unnamed
set autoread



" Einruecken von Python
set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
let python_highlight_builtins = 1



set fileencodings=ucs-bom,utf-8,latin1
set ls=2
set ruler
set showmode
set nocompatible
set sidescroll=1
set sidescrolloff=10
set nolinebreak
set nobackup

set incsearch
set hlsearch
set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent

set cino=g0
map \ :wa<CR>:make -j 8 -z 2>/dev/null ; f12<CR>
map <F12> :wa<CR>:make -j 8 -z 2>/dev/null ; f12<CR>
imap <F12> <ESC>:wa<CR>:make -j 8 -z 2>/dev/null ; f12<CR>

map <C-h> :call WinMove('h')<cr>
map <C-j> :call WinMove('j')<cr>
map <C-k> :call WinMove('k')<cr>
map <C-l> :call WinMove('l')<cr>

function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction


" Dateien erkennen
autocmd BufRead *.mk set syntax=python filetype=python
autocmd BufRead *.wsgi set syntax=python filetype=python
autocmd BufRead *.twig set syntax=html filetype=html
autocmd BufRead *.lektion set syntax=tex filetype=tex
autocmd BufRead *.omnifocusjs set syntax=javascript filetype=javascript

" Folds 
set foldenable
map <F7> :set foldlevel=0<CR>
map <F8> :set foldlevel=1<CR>
set foldmethod=marker
set foldmarker=#\ \ \ .,#.


" Zeile vom letzten mal merken
autocmd BufReadPost *
 \ if line("'\"") > 0 && line("'\"") <= line("$") |
 \   exe "normal g`\"" |
 \ endif



" Commands
com! FormatJSON %!python -m json.tool
com! R %!reload-browser firefox

set listchars=tab:>Â·,extends:>,precedes:<
set list

" Plugins
execute pathogen#infect()
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%* 

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_eslint_exe = 'npm run lint --'


colorscheme gruvbox
let g:gruvbox_contrast_dark = "hard"
set background=dark
let g:airline_theme='gruvbox'



let g:ctrlp_map = '<c-p>'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" Markieren langer zeilen
highlight ColorColumn ctermbg=yellow
call matchadd('ColorColumn', '\%102v', 102)

" Show trailing whitepace and spaces before a tab:
highlight ExtraWhitespace ctermbg=magenta guibg=magenta
match ExtraWhitespace /\s\+$/


